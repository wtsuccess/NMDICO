/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface PresaleInterface extends utils.Interface {
  functions: {
    "buyTokens(uint256)": FunctionFragment;
    "endsale()": FunctionFragment;
    "getTokenPrice()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setTokenAddress(address)": FunctionFragment;
    "setTokenPrice(uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "tokenprice()": FunctionFragment;
    "totalsold()": FunctionFragment;
    "transfer2wallet(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usdt()": FunctionFragment;
    "withdraw2Owner(uint256)": FunctionFragment;
    "withdrawUSDT(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyTokens"
      | "endsale"
      | "getTokenPrice"
      | "owner"
      | "renounceOwnership"
      | "setTokenAddress"
      | "setTokenPrice"
      | "token"
      | "tokenprice"
      | "totalsold"
      | "transfer2wallet"
      | "transferOwnership"
      | "usdt"
      | "withdraw2Owner"
      | "withdrawUSDT"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "endsale", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenprice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalsold", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transfer2wallet",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "usdt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw2Owner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUSDT",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "buyTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endsale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenprice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalsold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transfer2wallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdraw2Owner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUSDT",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Sell(address,uint256)": EventFragment;
    "SetTokenAddress(address)": EventFragment;
    "SetTokenPrice(uint256)": EventFragment;
    "Withdraw2Owner(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sell"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTokenAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTokenPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw2Owner"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SellEventObject {
  sender: string;
  totalvalue: BigNumber;
}
export type SellEvent = TypedEvent<[string, BigNumber], SellEventObject>;

export type SellEventFilter = TypedEventFilter<SellEvent>;

export interface SetTokenAddressEventObject {
  tokenaddress: string;
}
export type SetTokenAddressEvent = TypedEvent<
  [string],
  SetTokenAddressEventObject
>;

export type SetTokenAddressEventFilter = TypedEventFilter<SetTokenAddressEvent>;

export interface SetTokenPriceEventObject {
  tokenprice: BigNumber;
}
export type SetTokenPriceEvent = TypedEvent<
  [BigNumber],
  SetTokenPriceEventObject
>;

export type SetTokenPriceEventFilter = TypedEventFilter<SetTokenPriceEvent>;

export interface Withdraw2OwnerEventObject {
  owner: string;
}
export type Withdraw2OwnerEvent = TypedEvent<
  [string],
  Withdraw2OwnerEventObject
>;

export type Withdraw2OwnerEventFilter = TypedEventFilter<Withdraw2OwnerEvent>;

export interface Presale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PresaleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyTokens(
      usdtAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    endsale(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getTokenPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTokenAddress(
      _tokenaddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTokenPrice(
      _tokenvalue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokenprice(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalsold(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer2wallet(
      receiveaddr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    usdt(overrides?: CallOverrides): Promise<[string]>;

    withdraw2Owner(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawUSDT(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  buyTokens(
    usdtAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  endsale(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTokenAddress(
    _tokenaddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTokenPrice(
    _tokenvalue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  tokenprice(overrides?: CallOverrides): Promise<BigNumber>;

  totalsold(overrides?: CallOverrides): Promise<BigNumber>;

  transfer2wallet(
    receiveaddr: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  usdt(overrides?: CallOverrides): Promise<string>;

  withdraw2Owner(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawUSDT(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyTokens(
      usdtAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    endsale(overrides?: CallOverrides): Promise<void>;

    getTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setTokenAddress(
      _tokenaddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenPrice(
      _tokenvalue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    tokenprice(overrides?: CallOverrides): Promise<BigNumber>;

    totalsold(overrides?: CallOverrides): Promise<BigNumber>;

    transfer2wallet(
      receiveaddr: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    usdt(overrides?: CallOverrides): Promise<string>;

    withdraw2Owner(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawUSDT(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Sell(address,uint256)"(sender?: null, totalvalue?: null): SellEventFilter;
    Sell(sender?: null, totalvalue?: null): SellEventFilter;

    "SetTokenAddress(address)"(tokenaddress?: null): SetTokenAddressEventFilter;
    SetTokenAddress(tokenaddress?: null): SetTokenAddressEventFilter;

    "SetTokenPrice(uint256)"(tokenprice?: null): SetTokenPriceEventFilter;
    SetTokenPrice(tokenprice?: null): SetTokenPriceEventFilter;

    "Withdraw2Owner(address)"(owner?: null): Withdraw2OwnerEventFilter;
    Withdraw2Owner(owner?: null): Withdraw2OwnerEventFilter;
  };

  estimateGas: {
    buyTokens(
      usdtAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    endsale(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    getTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setTokenAddress(
      _tokenaddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setTokenPrice(
      _tokenvalue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokenprice(overrides?: CallOverrides): Promise<BigNumber>;

    totalsold(overrides?: CallOverrides): Promise<BigNumber>;

    transfer2wallet(
      receiveaddr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    usdt(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw2Owner(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawUSDT(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyTokens(
      usdtAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    endsale(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getTokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTokenAddress(
      _tokenaddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTokenPrice(
      _tokenvalue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenprice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalsold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer2wallet(
      receiveaddr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    usdt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw2Owner(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawUSDT(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
